// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require bootstrap.min
//= require_tree .
	
<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
	
function validate_task(task_form) {
	var form = $(task_form);
	
	if (form.find("#task_client_name").val().trim().length === 0) {
		event.preventDefault();
	}
}

function load_url() {
	location.load(url);
}

$(function() {
	/* test code here */
	
	$("#add_task_button").click( function() {
		$.get('/tasks/new', function(data) {
			$('#task_form').html(data);
			$('#task_form').on('shown', function () {
				$("#task_client_name").focus();
			 });
			$('#task_form').modal('show');
			$('.new_task').submit( function(event) {
				validate_task(this);
			});
		});
		
	});
	
	$(".task_row").hover(function() {
		$(this).find(".initials_updater").css({'visibility' : 'visible'});
		$(this).find(".status_stamp").addClass('hidden');
		$(this).find(".status_options").removeClass('hidden');
	},
	function() {
		$(this).find(".initials_updater").css({'visibility' : 'hidden'});
		$(this).find(".status_stamp").removeClass('hidden');
		$(this).find(".status_options").addClass('hidden');
	});
	
	// Update task when 'enter' key is pressed
	$(".initials_updater").bind('keypress', function(e) {
		if (e.keyCode == 13) {
			var task_object = { 
				task_id: $(this).data("task-id"),
				attribute: $(this).data("attribute"),
				value: $(this).val()
		   };
	
			$.post(window.location.origin + "/tasks/initial", task_object);
		}
	});
	
	// Update task status when select list selection in changed
	$(".status_options").change(function(e) {
		var task_object = { 
			task_id: $(this).data("task-id"),
			task_status: $(this).val()
	   };
		
		$.post(window.location.origin + "/tasks/update_status", task_object );
	});
	
	$(".task_row").click(function(event) {
		if ( !$(event.target).hasClass('initials_field') && !$(event.target).hasClass('status_options') ) {
			$.get(window.location.origin + '/tasks/' + $(this).data("task-id") + "/edit", function(data) {
			
				$('#task_form').html(data);
				$('#task_form').modal('show');
			
				$('.edit_task').submit( function(e) {
					validate_task(this);
				});
				
				$(".delete_task_button").click(function(event){
					if ( confirm("Are you sure you want to delete this task?") ) {
						$.post(window.location.origin + "/tasks/destroy", {task_id: $(this).data("task-id")}, function() {
							location.reload(true);
						});
					}
				});
				
				$('#task_form').on('shown', function () {
					//alert('foo');
					$("#task_client_name").focus();
				 });
			
			});
		}
	});
	
	$(".headshot_filter").click(function() {
		// TODO: This erb prevents file from being cached
		var url = '<%= url_for controller: :tasks, action: :queue, only_path: :true %>' + "?for=" + $(this).attr("alt");
		location.assign(url);
	});
	
	$(".task_suggestion").click(function(e) {
		var task_object = { 
			task_id: $(this).data("task-id"),
			attribute: 'delegated_to',
			value: $(this).data('delegated-to')
	   };

		$.post(window.location.origin + "/tasks/initial", task_object);
		e.preventDefault();
	});
	
});